name: Lint and Build Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-build-release:
    name: Lint and Build Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Grant Gradle wrapper permission
        run: chmod +x ./gradlew

      - name: Decode and save keystore
        run: |
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 --decode > keystore.jks

      - name: Create keystore.properties
        run: |
          echo "storeFile=\"${{ github.workspace }}/keystore.jks\"" > keystore.properties
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> keystore.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> keystore.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> keystore.properties

      - name: Run Lint (release)
        run: ./gradlew lintRelease

      - name: Assemble Release
        run: ./gradlew assembleRelease

      - name: Upload Lint Report (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-report
          path: app/build/reports/lint-results-release.html

      - name: Upload Release APK/AAB (optional)
        uses: actions/upload-artifact@v4
        with:
          name: release-apk-or-aab
          path: |
            app/build/outputs/**/*.apk
            app/build/outputs/**/*.aab

      - name: Get version name from Gradle
        id: version
        run: |
          VERSION_NAME=$(./gradlew -q :app:printVersionName)
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV

      - name: Get project name
        id: project_name
        run: |
          PROJECT_NAME=$(grep 'rootProject.name' settings.gradle.kts | cut -d '=' -f2 | tr -d '" ')
          echo "PROJECT_NAME=$PROJECT_NAME" >> $GITHUB_ENV

      - name: Rename APK
        run: |
          mkdir output_apk
          cp app/build/outputs/apk/${{ env.BUILD_TYPE }}/app-${{ env.BUILD_TYPE }}.apk \
             output_apk/${{ env.PROJECT_NAME }}-v${{ env.VERSION_NAME }}-${{ env.BUILD_TYPE }}.apk

      - name: Send APK to Telegram
        run: |
          curl -F chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
               -F document=@output_apk/${{ env.PROJECT_NAME }}-v${{ env.VERSION_NAME }}-${{ env.BUILD_TYPE }}.apk \
               -F caption="ðŸ“¦ *${{ env.PROJECT_NAME }}*\nðŸ›  Build: `${{ env.BUILD_TYPE }}`\nðŸ”– Version: `${{ env.VERSION_NAME }}`" \
               -F parse_mode=Markdown \
               https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument
